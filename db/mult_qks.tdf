--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="YES" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=80 LPM_WIDTHB=17 LPM_WIDTHP=97 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_mult 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_padd 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ cbx_util_mgl 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION fiftyfivenm_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION fiftyfivenm_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 10 lut 143 
SUBDESIGN mult_qks
( 
	dataa[79..0]	:	input;
	datab[16..0]	:	input;
	result[96..0]	:	output;
) 
VARIABLE
	add11_result[79..0]	:	WIRE;
	add15_result[62..0]	:	WIRE;
	mac_mult1 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 17,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult3 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 17,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult5 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 17,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult7 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 17,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult9 : fiftyfivenm_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 8,
			datab_clock = "none",
			datab_width = 17,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out10 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 25,
			output_clock = "none"
		);
	mac_out2 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 35,
			output_clock = "none"
		);
	mac_out4 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 35,
			output_clock = "none"
		);
	mac_out6 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 35,
			output_clock = "none"
		);
	mac_out8 : fiftyfivenm_mac_out
		WITH (
			dataa_width = 35,
			output_clock = "none"
		);
	sft12a[79..0] : soft;
	sft13a[79..0] : soft;
	sft14a[79..0] : soft;
	sft16a[62..0] : soft;
	sft17a[62..0] : soft;
	sft18a[62..0] : soft;
	w304w	: WIRE;
	w369w	: WIRE;
	w815w[97..0]	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add15_result[] = sft16a[].out + sft17a[].out;
	mac_mult1.dataa[] = ( dataa[17..0]);
	mac_mult1.datab[] = ( datab[16..0]);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"1";
	mac_mult3.dataa[] = ( dataa[35..18]);
	mac_mult3.datab[] = ( datab[16..0]);
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"1";
	mac_mult5.dataa[] = ( dataa[53..36]);
	mac_mult5.datab[] = ( datab[16..0]);
	mac_mult5.signa = B"0";
	mac_mult5.signb = B"1";
	mac_mult7.dataa[] = ( dataa[71..54]);
	mac_mult7.datab[] = ( datab[16..0]);
	mac_mult7.signa = B"0";
	mac_mult7.signb = B"1";
	mac_mult9.dataa[] = ( dataa[79..72]);
	mac_mult9.datab[] = ( datab[16..0]);
	mac_mult9.signa = B"1";
	mac_mult9.signb = B"1";
	mac_out10.dataa[] = mac_mult9.dataout[];
	mac_out2.dataa[] = mac_mult1.dataout[];
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out6.dataa[] = mac_mult5.dataout[];
	mac_out8.dataa[] = mac_mult7.dataout[];
	sft12a[].in = ( w304w, ( (! mac_out10.dataout[24..24]), ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( mac_out10.dataout[16..16], ( mac_out8.dataout[33..33], ( mac_out8.dataout[32..32], ( mac_out8.dataout[31..31], ( mac_out8.dataout[30..30], ( mac_out8.dataout[29..29], ( mac_out8.dataout[28..28], ( mac_out8.dataout[27..27], ( mac_out8.dataout[26..26], ( mac_out8.dataout[25..25], ( mac_out8.dataout[24..24], ( mac_out8.dataout[23..23], ( mac_out8.dataout[22..22], ( mac_out8.dataout[21..21], ( mac_out8.dataout[20..20], ( mac_out8.dataout[19..19], ( mac_out8.dataout[18..18], ( w304w, ( mac_out8.dataout[16..16], ( mac_out6.dataout[33..33], ( mac_out6.dataout[32..32], ( mac_out6.dataout[31..31], ( mac_out6.dataout[30..30], ( mac_out6.dataout[29..29], ( mac_out6.dataout[28..28], ( mac_out6.dataout[27..27], ( mac_out6.dataout[26..26], ( mac_out6.dataout[25..25], ( mac_out6.dataout[24..24], ( mac_out6.dataout[23..23], ( mac_out6.dataout[22..22], ( mac_out6.dataout[21..21], ( mac_out6.dataout[20..20], ( mac_out6.dataout[19..19], ( mac_out6.dataout[18..18], ( w304w, ( mac_out6.dataout[16..16], ( mac_out4.dataout[33..33], ( mac_out4.dataout[32..32], ( mac_out4.dataout[31..31], ( mac_out4.dataout[30..30], ( mac_out4.dataout[29..29], ( mac_out4.dataout[28..28], ( mac_out4.dataout[27..27], ( mac_out4.dataout[26..26], ( mac_out4.dataout[25..25], ( mac_out4.dataout[24..24], ( mac_out4.dataout[23..23], ( mac_out4.dataout[22..22], ( mac_out4.dataout[21..21], ( mac_out4.dataout[20..20], ( mac_out4.dataout[19..19], ( mac_out4.dataout[18..18], ( w304w, ( (! mac_out2.dataout[34..34]), ( mac_out2.dataout[33..33], ( mac_out2.dataout[32..32], ( mac_out2.dataout[31..31], ( mac_out2.dataout[30..30], ( mac_out2.dataout[29..29], ( mac_out2.dataout[28..28], ( mac_out2.dataout[27..27], ( mac_out2.dataout[26..26], ( mac_out2.dataout[25..25], ( mac_out2.dataout[24..24], ( mac_out2.dataout[23..23], ( mac_out2.dataout[22..22], ( mac_out2.dataout[21..21], ( mac_out2.dataout[20..20], ( mac_out2.dataout[19..18])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft13a[].in = ( w369w, ( sft18a[62..62].out, ( sft18a[61..61].out, ( sft18a[60..60].out, ( sft18a[59..59].out, ( sft18a[58..58].out, ( sft18a[57..57].out, ( sft18a[56..56].out, ( sft18a[55..55].out, ( sft18a[54..54].out, ( sft18a[53..53].out, ( sft18a[52..52].out, ( sft18a[51..51].out, ( sft18a[50..50].out, ( sft18a[49..49].out, ( sft18a[48..48].out, ( sft18a[47..47].out, ( sft18a[46..46].out, ( sft18a[45..45].out, ( sft18a[44..44].out, ( sft18a[43..43].out, ( sft18a[42..42].out, ( sft18a[41..41].out, ( sft18a[40..40].out, ( sft18a[39..39].out, ( sft18a[38..38].out, ( sft18a[37..37].out, ( sft18a[36..36].out, ( sft18a[35..35].out, ( sft18a[34..34].out, ( sft18a[33..33].out, ( sft18a[32..32].out, ( sft18a[31..31].out, ( sft18a[30..30].out, ( sft18a[29..29].out, ( sft18a[28..28].out, ( sft18a[27..27].out, ( sft18a[26..26].out, ( sft18a[25..25].out, ( sft18a[24..24].out, ( sft18a[23..23].out, ( sft18a[22..22].out, ( sft18a[21..21].out, ( sft18a[20..20].out, ( sft18a[19..19].out, ( sft18a[18..18].out, ( sft18a[17..17].out, ( sft18a[16..16].out, ( sft18a[15..15].out, ( sft18a[14..14].out, ( sft18a[13..13].out, ( sft18a[12..12].out, ( sft18a[11..11].out, ( sft18a[10..10].out, ( sft18a[9..9].out, ( sft18a[8..8].out, ( sft18a[7..7].out, ( sft18a[6..6].out, ( sft18a[5..5].out, ( sft18a[4..4].out, ( sft18a[3..3].out, ( sft18a[2..2].out, ( sft18a[1..1].out, ( sft18a[0..0].out, ( mac_out4.dataout[15..15], ( mac_out4.dataout[14..14], ( mac_out4.dataout[13..13], ( mac_out4.dataout[12..12], ( mac_out4.dataout[11..11], ( mac_out4.dataout[10..10], ( mac_out4.dataout[9..9], ( mac_out4.dataout[8..8], ( mac_out4.dataout[7..7], ( mac_out4.dataout[6..6], ( mac_out4.dataout[5..5], ( mac_out4.dataout[4..4], ( mac_out4.dataout[3..3], ( mac_out4.dataout[2..2], ( mac_out4.dataout[1..0])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft14a[].in = add11_result[];
	sft16a[].in = ( w369w, ( mac_out10.dataout[23..23], ( mac_out10.dataout[22..22], ( mac_out10.dataout[21..21], ( mac_out10.dataout[20..20], ( mac_out10.dataout[19..19], ( mac_out10.dataout[18..18], ( mac_out10.dataout[17..17], ( (! mac_out8.dataout[34..34]), ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( mac_out8.dataout[17..17], ( (! mac_out6.dataout[34..34]), ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( mac_out6.dataout[17..17], ( (! mac_out4.dataout[34..34]), ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( w304w, ( mac_out4.dataout[17..17], w304w))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft17a[].in = ( w369w, ( w369w, ( w369w, ( w369w, ( w369w, ( w369w, ( w369w, ( w369w, ( w369w, ( mac_out10.dataout[15..15], ( mac_out10.dataout[14..14], ( mac_out10.dataout[13..13], ( mac_out10.dataout[12..12], ( mac_out10.dataout[11..11], ( mac_out10.dataout[10..10], ( mac_out10.dataout[9..9], ( mac_out10.dataout[8..8], ( mac_out10.dataout[7..7], ( mac_out10.dataout[6..6], ( mac_out10.dataout[5..5], ( mac_out10.dataout[4..4], ( mac_out10.dataout[3..3], ( mac_out10.dataout[2..2], ( mac_out10.dataout[1..1], ( mac_out10.dataout[0..0], ( w369w, ( w369w, ( mac_out8.dataout[15..15], ( mac_out8.dataout[14..14], ( mac_out8.dataout[13..13], ( mac_out8.dataout[12..12], ( mac_out8.dataout[11..11], ( mac_out8.dataout[10..10], ( mac_out8.dataout[9..9], ( mac_out8.dataout[8..8], ( mac_out8.dataout[7..7], ( mac_out8.dataout[6..6], ( mac_out8.dataout[5..5], ( mac_out8.dataout[4..4], ( mac_out8.dataout[3..3], ( mac_out8.dataout[2..2], ( mac_out8.dataout[1..1], ( mac_out8.dataout[0..0], ( w369w, ( w369w, ( mac_out6.dataout[15..15], ( mac_out6.dataout[14..14], ( mac_out6.dataout[13..13], ( mac_out6.dataout[12..12], ( mac_out6.dataout[11..11], ( mac_out6.dataout[10..10], ( mac_out6.dataout[9..9], ( mac_out6.dataout[8..8], ( mac_out6.dataout[7..7], ( mac_out6.dataout[6..6], ( mac_out6.dataout[5..5], ( mac_out6.dataout[4..4], ( mac_out6.dataout[3..3], ( mac_out6.dataout[2..2], ( mac_out6.dataout[1..1], ( mac_out6.dataout[0..0], ( w369w, mac_out4.dataout[16..16]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft18a[].in = add15_result[];
	result[96..0] = w815w[96..0];
	w304w = B"1";
	w369w = B"0";
	w815w[] = ( sft14a[79..78].out, sft14a[77..76].out, sft14a[75..74].out, sft14a[73..72].out, sft14a[71..70].out, sft14a[69..68].out, sft14a[67..66].out, sft14a[65..64].out, sft14a[63..62].out, sft14a[61..60].out, sft14a[59..58].out, sft14a[57..56].out, sft14a[55..54].out, sft14a[53..52].out, sft14a[51..50].out, sft14a[49..48].out, sft14a[47..46].out, sft14a[45..44].out, sft14a[43..42].out, sft14a[41..40].out, sft14a[39..38].out, sft14a[37..36].out, sft14a[35..34].out, sft14a[33..32].out, sft14a[31..30].out, sft14a[29..28].out, sft14a[27..26].out, sft14a[25..24].out, sft14a[23..22].out, sft14a[21..20].out, sft14a[19..18].out, sft14a[17..16].out, sft14a[15..14].out, sft14a[13..12].out, sft14a[11..10].out, sft14a[9..8].out, sft14a[7..6].out, sft14a[5..4].out, sft14a[3..2].out, sft14a[1..0].out, mac_out2.dataout[17..17], mac_out2.dataout[16..16], mac_out2.dataout[15..15], mac_out2.dataout[14..14], mac_out2.dataout[13..13], mac_out2.dataout[12..12], mac_out2.dataout[11..11], mac_out2.dataout[10..10], mac_out2.dataout[9..9], mac_out2.dataout[8..8], mac_out2.dataout[7..7], mac_out2.dataout[6..6], mac_out2.dataout[5..5], mac_out2.dataout[4..4], mac_out2.dataout[3..3], mac_out2.dataout[2..2], mac_out2.dataout[1..1], mac_out2.dataout[0..0]);
END;
--VALID FILE
